-- Function to determine if we're in a tmux session
local function in_tmux()
	return os.getenv("TMUX") ~= nil
end

-- Function to write theme configurations
local function setup_theme_files()
	local config_dir = vim.fn.stdpath("config")
	local tmux_dark_theme = config_dir .. "/tmux_dark.conf"
	local tmux_light_theme = config_dir .. "/tmux_light.conf"
	local wezterm_dir = vim.fn.expand("$HOME/.config/wezterm")
	vim.fn.system("mkdir -p " .. wezterm_dir)

	-- Write tmux themes
	local dark_tmux_config = [[
# Dark mode (zenbones dark)
set -g status-bg '#1C1917' 
set -g status-fg '#B4BDC3'
set -g status-right '#[fg=#66A5AD]#[bg=#1C1917] %H:%M '
set -g window-status-format "#[fg=#888F94, bg=#1C1917] #I #[fg=#B4BDC3, bg=#1C1917] #W "
set -g window-status-current-format "#[fg=#66A5AD, bg=#3D4042] #I #[fg=#B4BDC3, bg=#3D4042] #W "
set -g status-left '#[fg=#819B69, bg=#1C1917] #S #[default]'
]]

	local light_tmux_config = [[
# Light mode (zenbones light)
set -g status-bg '#F0EDEC' 
set -g status-fg '#2C363C'
set -g status-right '#[fg=#3B8992]#[bg=#F0EDEC] %H:%M '
set -g window-status-format "#[fg=#4F5E68, bg=#F0EDEC] #I #[fg=#2C363C, bg=#F0EDEC] #W "
set -g window-status-current-format "#[fg=#3B8992, bg=#CBD9E3] #I #[fg=#2C363C, bg=#CBD9E3] #W "
set -g status-left '#[fg=#4F6C31, bg=#F0EDEC] #S #[default]'
]]

	-- Write WezTerm theme files
	local wezterm_dark_config = [[
-- This file is auto-generated by Neovim
-- It will be overwritten when theme is toggled
local wezterm = require("wezterm")

local function apply_theme(config)
	config.colors = {
		foreground = "#B4BDC3",
		background = "#1C1917",
		cursor_fg = "#1C1917",
		cursor_bg = "#C4CACF",
		cursor_border = "#1C1917",
		selection_fg = "#B4BDC3",
		selection_bg = "#3D4042",
		ansi = { "#1C1917", "#DE6E7C", "#819B69", "#B77E64", "#6099C0", "#B279A7", "#66A5AD", "#B4BDC3" },
		brights = { "#403833", "#E8838F", "#8BAE68", "#D68C67", "#61ABDA", "#CF86C1", "#65B8C1", "#888F94" },
	}
	return config
end

return apply_theme
]]

	local wezterm_light_config = [[
-- This file is auto-generated by Neovim
-- It will be overwritten when theme is toggled
local wezterm = require("wezterm")

local function apply_theme(config)
	config.colors = {
		foreground = "#2C363C",
		background = "#F0EDEC",
		cursor_bg = "#2C363C",
		cursor_border = "#F0EDEC",
		cursor_fg = "#F0EDEC",
		selection_bg = "#CBD9E3",
		selection_fg = "#2C363C",
		ansi = { "#F0EDEC", "#A8334C", "#4F6C31", "#944927", "#286486", "#88507D", "#3B8992", "#2C363C" },
		brights = { "#CFC1BA", "#94253E", "#3F5A22", "#803D1C", "#1D5573", "#7B3B70", "#2B747C", "#4F5E68" },
	}
	return config
end

return apply_theme
]]

	-- Write all files
	local files = {
		[tmux_dark_theme] = dark_tmux_config,
		[tmux_light_theme] = light_tmux_config,
		[wezterm_dir .. "/wezterm_dark.lua"] = wezterm_dark_config,
		[wezterm_dir .. "/wezterm_light.lua"] = wezterm_light_config,
	}

	for filepath, content in pairs(files) do
		local file = io.open(filepath, "w")
		if file then
			file:write(content)
			file:close()
		end
	end
end

-- Save current theme preference and update WezTerm
local function save_theme_preference(background)
	local config_dir = vim.fn.stdpath("config")
	local wezterm_dir = vim.fn.expand("$HOME/.config/wezterm")
	local pref_file = config_dir .. "/theme_preference"

	-- Save theme preference
	local file = io.open(pref_file, "w")
	if file then
		file:write(background)
		file:close()
	end

	-- Write WezTerm theme pointer file
	local wezterm_theme_file = wezterm_dir .. "/wezterm_theme.lua"
	local theme_path = wezterm_dir .. "/wezterm_" .. background .. ".lua"
	file = io.open(wezterm_theme_file, "w")
	if file then
		file:write(theme_path)
		file:close()
	end

	-- Also write to WezTerm colorscheme file (legacy compatibility)
	local wezterm_colorscheme_file = wezterm_dir .. "/colorscheme"
	local wezterm_scheme = background == "dark" and "ZenbonesDark" or "ZenbonesLight"
	file = io.open(wezterm_colorscheme_file, "w")
	if file then
		file:write(wezterm_scheme)
		file:close()
	end
end

-- Load saved theme preference
local function load_theme_preference()
	local config_dir = vim.fn.stdpath("config")
	local pref_file = config_dir .. "/theme_preference"
	local file = io.open(pref_file, "r")
	if file then
		local theme = file:read("*all"):gsub("%s+", "") -- Remove whitespace
		file:close()
		return theme
	end
	return "dark" -- Default
end

-- Function to reload WezTerm configuration
local function reload_wezterm()
	-- Touch the theme preference file to trigger WezTerm's file watcher
	local pref_file = vim.fn.expand("~/.config/nvim/theme_preference")
	-- Update the file's modification time
	vim.fn.system("touch " .. pref_file)

	-- Also try the CLI reload as backup
	vim.fn.system("wezterm cli reload-config 2>/dev/null &")
end

-- Set up files on startup
setup_theme_files()

-- Apply saved theme on startup
local preferred_theme = load_theme_preference()
if preferred_theme ~= vim.o.background then
	vim.o.background = preferred_theme
	save_theme_preference(preferred_theme)
end

-- Function to toggle theme
function _G.ToggleTheme()
	local config_dir = vim.fn.stdpath("config")
	local tmux_dark_theme = config_dir .. "/tmux_dark.conf"
	local tmux_light_theme = config_dir .. "/tmux_light.conf"

	-- Toggle Neovim theme
	local new_theme
	if vim.o.background == "dark" then
		new_theme = "light"
		vim.o.background = new_theme
		-- Update tmux if in tmux
		if in_tmux() then
			vim.fn.system("tmux source-file " .. tmux_light_theme)
		end
	else
		new_theme = "dark"
		vim.o.background = new_theme
		-- Update tmux if in tmux
		if in_tmux() then
			vim.fn.system("tmux source-file " .. tmux_dark_theme)
		end
	end

	-- Save the current theme preference and update WezTerm
	save_theme_preference(new_theme)

	-- Force WezTerm to reload - try multiple methods
	vim.defer_fn(function()
		reload_wezterm()
	end, 50)

	-- Print a message to confirm the theme change
	print("Theme changed to " .. vim.o.background .. "")
end

-- Set up the keybinding
vim.api.nvim_set_keymap("n", "<leader>ll", ":lua ToggleTheme()<CR>", { noremap = true, silent = true })

-- Create an autocommand to handle external background changes
vim.api.nvim_create_autocmd("OptionSet", {
	pattern = "background",
	callback = function()
		-- Only proceed if not initial setup
		if vim.v.event.option ~= "background" then
			return
		end

		local config_dir = vim.fn.stdpath("config")
		local tmux_dark_theme = config_dir .. "/tmux_dark.conf"
		local tmux_light_theme = config_dir .. "/tmux_light.conf"
		local is_dark = vim.o.background == "dark"

		-- Save theme preference and update WezTerm
		save_theme_preference(is_dark and "dark" or "light")

		-- Update tmux if in tmux
		if in_tmux() then
			vim.fn.system("tmux source-file " .. (is_dark and tmux_dark_theme or tmux_light_theme))
		end

		-- Reload WezTerm configuration
		reload_wezterm()
	end,
})

return {
	"zenbones-theme/zenbones.nvim",
	-- Optionally install Lush. Allows for more configuration or extending the colorscheme
	-- If you don't want to install lush, make sure to set g:zenbones_compat = 1
	-- In Vim, compat mode is turned on as Lush only works in Neovim.
	dependencies = "rktjmp/lush.nvim",
	lazy = false,
	priority = 1000,
	config = function()
		vim.g.zenbones_darken_comments = 45
		vim.cmd.colorscheme("zenbones")
	end,
}
